{"name":"Repo1","tagline":"","body":"<?php\r\n\r\n/**\r\n*  Class Gravatar\r\n*\r\n* From Gravatar Help:\r\n*        \"A gravatar is a dynamic image resource that is requested from our server. The request\r\n*        URL is presented here, broken into its segments.\"\r\n* Source:\r\n*    http://site.gravatar.com/site/implement\r\n*\r\n* Usage:\r\n* <code>\r\n*        $email = \"youremail@yourhost.com\";\r\n*        $default = \"http://www.yourhost.com/default_image.jpg\";\t// Optional\r\n*        $gravatar = new Gravatar($email, $default);\r\n*        $gravatar->size = 80;\r\n*        $gravatar->rating = \"G\";\r\n*        $gravatar->border = \"FF0000\";\r\n*\r\n*        echo $gravatar; // Or echo $gravatar->toHTML();\r\n* </code>\r\n*\r\n*\tClass Page: http://www.phpclasses.org/browse/package/4227.html\r\n*\r\n* @author Lucas Ara√∫jo <araujo.lucas@gmail.com>\r\n* @version 1.0\r\n* @package Gravatar\r\n*/\r\nclass Gravatar\r\n{\r\n    /**\r\n     *    Gravatar's url\r\n     */\r\n    const GRAVATAR_URL = \"http://www.gravatar.com/avatar.php\";\r\n\r\n    /**\r\n     *    Ratings available\r\n     */\r\n    private $GRAVATAR_RATING = array(\"G\", \"PG\", \"R\", \"X\");\r\n    \r\n    /**\r\n     *    Query string. key/value\r\n     */\r\n    protected $properties = array(\r\n        \"gravatar_id\"\t=> NULL,\r\n        \"default\"\t\t=> NULL,\r\n        \"size\"\t\t\t=> 80,        // The default value\r\n        \"rating\"\t\t=> NULL,\r\n        \"border\"\t\t=> NULL,\r\n    );\r\n\r\n    /**\r\n     *    E-mail. This will be converted to md5($email)\r\n     */\r\n    protected $email = \"\";\r\n\r\n    /**\r\n     *    Extra attributes to the IMG tag like ALT, CLASS, STYLE...\r\n     */\r\n    protected $extra = \"\";\r\n\r\n    /**\r\n     *    \r\n     */\r\n    public function __construct($email=NULL, $default=NULL) {\r\n        $this->setEmail($email);\r\n        $this->setDefault($default);\r\n    }\r\n\r\n    /**\r\n     *    \r\n     */\r\n    public function setEmail($email) {\r\n        if ($this->isValidEmail($email)) {\r\n            $this->email = $email;\r\n            $this->properties['gravatar_id'] = md5(strtolower($this->email));\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *    \r\n     */\r\n    public function setDefault($default) {\r\n        $this->properties['default'] = $default;\r\n    }\r\n\r\n    /**\r\n     *    \r\n     */\r\n    public function setRating($rating) {\r\n        if (in_array($rating, $this->GRAVATAR_RATING)) {\r\n            $this->properties['rating'] = $rating;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *    \r\n     */\r\n    public function setSize($size) {\r\n        $size = (int) $size;\r\n        if ($size <= 0)\r\n            $size = NULL;        // Use the default size\r\n        $this->properties['size'] = $size;\r\n    }\r\n\r\n    /**\r\n     *    \r\n     */\r\n    public function setExtra($extra) {\r\n        $this->extra = $extra;\r\n    }\r\n\r\n    /**\r\n     *    \r\n     */\r\n    public function isValidEmail($email) {\r\n        // Source: http://www.zend.com/zend/spotlight/ev12apr.php\r\n        return eregi(\"^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,3})$\", $email);\r\n    }\r\n\r\n    /**\r\n     *    Object property overloading\r\n     */\r\n    public function __get($var) { return @$this->properties[$var]; }\r\n\r\n    /**\r\n     *    Object property overloading\r\n     */\r\n    public function __set($var, $value) {\r\n        switch($var) {\r\n            case \"email\":    return $this->setEmail($value);\r\n            case \"rating\":    return $this->setRating($value);\r\n            case \"default\":    return $this->setDefault($value);\r\n            case \"size\":    return $this->setSize($value);\r\n            // Cannot set gravatar_id\r\n            case \"gravatar_id\": return;\r\n        }\r\n        return @$this->properties[$var] = $value;\r\n    }\r\n\r\n    /**\r\n     *    Object property overloading\r\n     */\r\n    public function __isset($var) { return isset($this->properties[$var]); }\r\n\r\n    /**\r\n     *    Object property overloading\r\n     */\r\n    public function __unset($var) { return @$this->properties[$var] == NULL; }\r\n\r\n    /**\r\n     *    Get source\r\n     */\r\n    public function getSrc() {\r\n        $url = self::GRAVATAR_URL .\"?\";\r\n        $first = true;\r\n        foreach($this->properties as $key => $value) {\r\n            if (isset($value)) {\r\n                if (!$first)\r\n                    $url .= \"&\";\r\n                $url .= $key.\"=\".urlencode($value);\r\n                $first = false;\r\n            }\r\n        }\r\n        return $url;    \r\n    }\r\n\r\n    /**\r\n     *    toHTML\r\n     */\r\n    public function toHTML() {\r\n        return     '<img src=\"'. $this->getSrc() .'\"'\r\n                .(!isset($this->size) ? \"\" : ' width=\"'.$this->size.'\" height=\"'.$this->size.'\"')\r\n                .$this->extra\r\n                .' />';    \r\n    }\r\n\r\n    /**\r\n     *    toString\r\n     */\r\n    public function __toString() { return $this->toHTML(); }\r\n}\r\n\r\n?> ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}